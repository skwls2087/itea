<?xml version="1.0" encoding="UTF-8"  ?>
<!-- xml선언부-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- myBatis-config.xml의     mapper로 반드시 등록되어야 한다 --> 
<mapper namespace="member">
	
	<!-- 아이디 찾기 조예인-->
	<select id="find_id" resultType="memberDTO" parameterType="memberDTO">
		select mclass, mmail from member 
    where mname = #{mname} and mphone = #{mphone}
	</select>
	
	<!-- 비밀번호 변경 조예인-->
	<update id="update_pw" parameterType="memberDTO">
		update member set mpw = #{mpw} 
		where mmail = #{mmail}
	</update>
	
	<!-- 중복 검사-->
	<select id="check" parameterType="memberDTO" resultType="int">
		select count(*) from member 
		where mname = #{mname} and mmail = #{mmail} and mclass=1
	</select> 
	
	<!-- 이름 중복 검사
	<select id="check_name" parameterType="string" resultType="int">
		select count(*) from member where mname = #{mname}
	</select>-->
	
	<!-- 이메일 중복 검사
	<select id="check_email" parameterType="string" resultType="int">
		select count(*) from member where mmail = #{mmail}
	</select>-->
	

	<!-- 로그인 신나진 -->
	<select id="login" resultType="memberDTO">
		select *
		from member
		where mmail=#{mmail} and mpw=#{mpw} and mclass=#{mclass}
	</select>
	
	<!-- 이메일이 일치하는 회원 조회(sns버전) 신나진 -->
	<select id="snsLogin" resultType="memberDTO">
		select *
		from member
		where mmail=#{mmail} and mclass=#{mclass}
	</select>
	
		<!--정보수정 폼 불러오기  -->
		<select id="modifyInfo" resultType="memberDTO">
			select *
			from member
			where mno= #{mno}
		</select>
	<!--회원정보 수정--> 
		<update id="modify" parameterType="memberDTO" >
		<!-- update member
		set		mnick		= #{mnick},
				mphone	= #{mphone},
				mgradu	= #{mgradu},
				mnickdate = CURDATE(),
		      mpw = case when mclass=1 then #{mpw}
		      mnickdate = case when ((select TIMESTAMPDIFF(DAY,mnickdate,CURDATE())) >=30) then CURDATE()
		      mnick = case when ((select TIMESTAMPDIFF(DAY,mnickdate,CURDATE())) >=30)  then #{mnick}
				end	
		where mno=  #{mno}; -->
		 update member
		set	mphone	= #{mphone},
				mgradu	= #{mgradu},
		      mpw = case when mclass=1 then #{mpw} end, 
		      mnickdate = case when (SELECT DATEDIFF(CURDATE(), mnickdate)>30 FROM member WHERE mno= #{mno})=1 then CURDATE() else mnickdate end,
		      mnick = case when (SELECT DATEDIFF(CURDATE(), mnickdate)>30 FROM member WHERE mno= #{mno})=1  then #{mnick} else mnick end	
		where mno=  #{mno};
		</update>
	<!-- 회원탈퇴하기 -->	
	<delete id="delete" parameterType="memberDTO">
	DELETE 
	FROM member
	WHERE mno=#{mno}
	</delete>
	<!-- 닉네임에 해당하는 회원 존재하는지 검색(내 닉네임은 제외) 신나진 -->
	<select id="mynickCheck" parameterType="memberDTO" resultType="int">
		select count(*)
		from member
		where mnick=#{mnick} and mno!=#{mno}
	</select>


	
	<!-- 회원가입 -->
	<!-- 회원가입 일반-->
	<insert id="joinProc" parameterType="memberDTO">
		insert into member(mclass,mmail,mpw,mname,mnick,mphone,mbirth,msex,mgradu,mdate,mnickdate)
		values(#{mclass},#{mmail},#{mpw},#{mname},#{mnick},#{mphone},#{mbirth},#{msex},#{mgradu},now(),now())
	</insert>
	
	<!-- 회원가입 SNS-->
	<insert id="joinProcSNS" parameterType="memberDTO">
		insert into member(mclass,mmail,mname,mnick,mphone,mbirth,msex,mgradu,madate,mnickdate)
		values(#{mclass},#{mmail},#{mname},#{mnick},#{mphone},#{mbirth},#{msex},#{mgradu},now(),now())
	</insert>
	
	<!-- 메일에 해당하는 회원 존재하는지 검색 신나진 -->
	<select id="mailCheck" parameterType="string" resultType="int">
		select count(*)
		from member
		where mmail=#{mmail} and mclass=1
	</select>
	
	<!-- 닉네임에 해당하는 회원 존재하는지 검색 신나진 -->
	<select id="nickCheck" parameterType="string" resultType="int">
		select count(*)
		from member
		where mnick=#{mnick}
	</select>
</mapper>














